Permutations

https://leetcode.com/problems/permutations/description/



class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        backtrack(nums,0,ans);
        return ans;
    }

    private void backtrack(int[] nums,int start,List<List<Integer>> ans)
    {
        if(start==nums.length)
        {
            ans.add(toList(nums));
            return;
        }
        else
        {
            for(int i=start;i<nums.length;i++)
            {
                swap(nums,i,start);
                backtrack(nums,start+1,ans);
                swap(nums,i,start);
            }
        }
    }

    private List<Integer> toList(int[] nums)
    {
        ArrayList<Integer> list=new ArrayList<>();
        for(int i:nums)
        {
            list.add(i);
        }

        return list;
    }
    private void swap(int[] nums, int i,int j)
    {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}